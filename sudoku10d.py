# The success of sudoku 10c in looking for different solutions is encouraging.
# It took it 0.2 seconds to find all the 12 solutions of a sudoku puzzle with
# sereval clue removed (also found some clue to be useless).
#
# So, what we'll do now is figure out an argithrim to make a move with
# a given board.
#
# Imaginea tree of all possiblity, with the top branches being a completed
# Sudoku. The tree has many branches terminated at a certain point.
# I'm somewhat bored when writing this, so I'll inculde a graph just for fun.
#
# P is a uncompleted Sudoku, and S is completed. T mean rules were broken
# T right after a branch is ingorned
#   0 1 2 3 4 5 6 7
# A P┬P┬P┬P┬P─P─P-S
# B  │ │ │ ├P─P-P-T
# C  │ │ │ └P-P-P-T
# D  │ │ ├P┬P─P-T
# E  │ │ │ └P-P-P-T
# F  │ │ └P─P-P-P-S
# G  │ ├P┬P┬P─P─P-S
# H  │ │ │ ├P─T
# I  │ │ │ └P-P-P-S
# J  │ │ ├P┬P─P-T
# K  │ │ │ └P-P-P-T
# L  │ │ └P─P-P-P-S
# M  │ ├P┬P─P┬P─P─S
# N  │ │ │   └P─P-S
# O  │ │ └P─P─P─P─S
# P  │ └P─P┬P─P─P─T
# Q  │     └P┬P─P─T
# R  │       └P─P─T
# S  └P-P┬P─P─P─P─T
# T      └P─P─P─P─S
# Simbols: ┼│├┴─┬┤┘┐┌└
#
# If there is infinte calculating power, the result is set.
# In the graph, the best move is S1!
# However, that require calculating if all possible move has only one move.
# Asuming the graph is known, to calculate best move:
#
# Attempt 1:
# Imagine assigning the value 2 to all S.
# If someone has this board feeded to him, ! would guarteen a win.
# Now trace it back one layer.
# If two S merged(which is to say it branched into at least two S),
# Set this to 1, at which saying ! after one solution would be a win
# Else set that node to 2 as well
# Then continue to trace it back
# If there are no merge, remain the same#Wrong, figure it out.
# Else if there is a 2 in merger, set it to 1
# Else, if all
#
# Note: Don't work when you are sleepy
# The previous example doesn't work because the tree is acturally
# generated by my program, while a real one has loop, and the best
# move can be quite different
#
# So what we'll be doing would be: First, use the few brain cells
# you have left to figure out the winning stratage when you know every
# solutions.
# Second, check if the technic can be used even when only tree is known,
# if it work: Third: Try reducing the completeness of the tree needed.
#
# First:
# Attampt 1:
# If we know all the possible solutions emerging from current board,
# what the players will do is set value for certain spot which remove
# certain possiblity. Assuming both players have the info, the winning
# step would be allowing only one possibility to remain,so the previous
# board would have one soution that has a spot different than all other.
# Assuming the previous move was the best possible, then we can know that
# there wasn't any way to win, and all move will present an oppotunity for
# the other player.
#
# Attampt 2:
# Imagine a bipartite graph with one set of vertex U denoting all
# possible solution, and the other set V representing all possible
# position and value to be filled in(e.g. Aa1, Bd3). A edge connect
# the vertex if the position and the value is wrong in the solution.
# What the players take turns to do is to choose a vertex v in V, and
# remove all vertex in U that is connected to v. To win, a player need
# to remove v and leaving only one element remaining in U. (This remind
# me of reading about nim(Game theory) in wikipedia) The next player win
# when a vertex v is created such that all but one u has a edge connected
# to it. The previous board must satisfiles A: there is no way to win, and
# B: every move will create wining situration. So there is
# Sorry, not working
#
# Attampt 3:
# The graph is multipartite, with fist layer solutions, second layer values,
# and third layer locations. It should be noted that there can be two of the
# same value in second layer, but having different location. Each value only
# connect to one location. And a move is made by choosing a value node, then
# removing every solutions connected to all other values which are connected
# to the same location. So if a certain value is only linked to one possible
# solution, the next player will win by picking that node. So if a move left
# a value connected to one solution, the opponent would win. Such a move has
# to happen between a pair of values that is connected only by one solution.
# Now we will analyse the indication for such a pair with our program first,
# then move on to continue study the effect of this on our theory of sudoku.
# In normal language, that mean there is only one solution with that pair of
# values. In our program the order of location is not exact determinstic(You
# have to consider if different values are chosen, the order for the rest of
# column(rule) could change.)
#
